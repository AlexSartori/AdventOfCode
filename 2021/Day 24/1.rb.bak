inst = []
while line = gets
  inst << line.split(' ')
end

def is_n(n)
  n >= '1' and n <= '9'
end

def reduce(cond)
  cond.gsub('+-', '-').gsub('0+', '').gsub('+0', '').gsub(/[a-z]\*0/, '0').gsub('(0)', '0').gsub(/\(([a-z0-9]+)\)/, '\1')
end

def update_conds(var, op, b)
  if $conditions[var].nil?
    $conditions.keys.each do |k|
      $conditions[k][1].gsub!(var, '(' + var + op + b + ')')
      $conditions[k][1] = reduce $conditions[k][1]
    end
  else
    $conditions[var] = [$conditions[var][0], '(' + $conditions[var][1] + op + b +')']
    $conditions[var][1] = reduce $conditions[var][1]
  end

end

in_cnt = 14
$conditions = Hash['z' => ['=', '0']]
puts "Conds: #{$conditions}"

inst.reverse.each do |i, a, b|
  puts "\nInst: #{i} #{a} #{b}"

  c = $conditions[a]

  case i
  when 'inp'
    if $conditions.has_key? a
      $conditions['in#' + in_cnt.to_s] = c
      $conditions.delete(a)
    else
      $conditions.keys.each do |var|
        $conditions[var][1].gsub!(a, '(in#' + in_cnt.to_s + ')')
      end
    end
    in_cnt -= 1
  when 'add'
    update_conds a, '+', b
  when 'eql'
    unless c.nil?
      if c[0] != '='
        puts "diobbB"
      elsif c[1] == '0'
        $conditions[a] = ['!=', b]
      else c[1] == '1'
        $conditions[a] = ['=', b]
      end
    else
      # $conditions[a] = ['=', '0']
    end
  when 'mul'
    update_conds a, '*', b
  when 'div'
    update_conds a, '/', b
  when 'mod'
    update_conds a, '<', b
  else
    puts "Instruction non implemented"
    break
  end

  puts "Conds: #{$conditions}"
end

puts "\n\n"
$conditions.each do |var, cond|
  puts "#{var} #{cond[0]} #{reduce cond[1]}"
end
